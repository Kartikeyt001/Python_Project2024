#PROJECT
import tkinter as tk
import mysql.connector
from mysql.connector import Error
from tkinter import messagebox
import pandas as pd
from tkinter import ttk
from tkinter import Tk, Label
from tkinter import*
import time
from tkinter import Toplevel

from tkinter import*
import time
from tkinter import Toplevel
root=tk.Tk()
root.title("Hotel Management System")
root.config(bg="#333333")
root.geometry('1250x650+180+45')
root.resizable(False,False)

ss='⁑⁑※※  HOTEL MANAGEMENT SYSTEM  ※※⁑⁑'
count=0
text=''
data=StringVar()
#---VARIABLES-----------------------------------------------------------
ID=tk.StringVar()
Name=tk.StringVar()
Room=tk.StringVar()
Gender=tk.StringVar()
Address=tk.StringVar()
Contact=tk.StringVar()
Booking=tk.StringVar()
Packing=tk.StringVar()
Payment=tk.StringVar()
search_by=tk.StringVar()

#Clock------------------------------------------------------------------
def tick():
    time_string=time.strftime("%H:%M:%S")
    date_string=time.strftime("%d/%m/%y")
    clock.config(text=' Date: '+date_string+"\n"+" Time: "+ time_string)
    clock.after(200,tick)

#-----------------------------------------------------------------------
sliderLabel=Label(root, text=ss, font=('arial', 25, 'bold'), relief=RIDGE, borderwidth=1, width=65, bg='cyan', fg="teal")
sliderLabel.place(x=0, y=0)

clock=Label(root, font=('tahoma',9, 'bold'), borderwidth=1, bg='cyan')
clock.place(x=6, y=5)
tick()

#--------------------------------------------------------------------
DataEntryFrame=Frame(root, bg='black', relief=RAISED, borderwidth=4)
DataEntryFrame.place(x=20, y=55, height=580, width=500)

DataLabelFrame=Frame(root, bg='silver', relief=GROOVE, borderwidth=6)
DataLabelFrame.place(x=45, y=520, height=80, width=450)

DataFrame=Frame(root, bg='silver', relief=GROOVE, borderwidth=6)
DataFrame.place(x=550, y=50, height=580, width=670)

Label(root, text="Enter Customer Details", font="Rockwell 22 underline", bg="crimson", relief=RIDGE, fg="white", width=24, borderwidth=3).place(x=51, y=75)

#Label----------------------------------------------------------------

IDlabel=Label(root, text="Customer ID-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
IDlabel.place(x=45,y=140)

Namelabel=Label(root, text="Customer Name-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Namelabel.place(x=45,y=180)

Roomlabel=Label(root, text="Room No.-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Roomlabel.place(x=45,y=220)

Genderlabel=Label(root, text="Gender-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Genderlabel.place(x=45,y=260)

Addresslabel=Label(root, text="Address-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Addresslabel.place(x=45,y=300)

Contactlabel=Label(root, text="Contact-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Contactlabel.place(x=45,y=340)

Bookinglabel=Label(root, text="Booking Date-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Bookinglabel.place(x=45,y=380)

Packinglabel=Label(root, text="Packing Date-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Packinglabel.place(x=45,y=420)

Paymentlabel=Label(root, text="Payment-", font=('times', 11, 'bold'), relief=RIDGE, borderwidth=5, width=15, anchor='w')
Paymentlabel.place(x=45,y=460)
#Entry-----------------------------------------------------------------
Customer_ID_entry=Entry(root, font=('arial', 14, 'bold'), bd=4, textvariable=ID)
Customer_ID_entry.place(x=260,y=140)
    
Customer_Name_entry=Entry(root, font=('arial', 14, 'bold'), bd=4, textvariable=Name)
Customer_Name_entry.place(x=260,y=180)
    
Room_No_entry=Entry(root, font=('arial', 14, 'bold'), bd=4, textvariable=Room)
Room_No_entry.place(x=260,y=220)
    
Gender_entry_combobox=ttk.Combobox(root, font=('arial', 14, 'bold'), values=("Male", "Female"), textvariable=Gender)
Gender_entry_combobox.place(x=260, y=260)
    
Address_entry=Entry(root, font=('arial', 14), bd=4, textvariable=Address)
Address_entry.place(x=260,y=300)

Contact_entry=Entry(root, font=('arial', 14), bd=4, textvariable=Contact)
Contact_entry.place(x=260,y=340)

Booking_Date_entry=Entry(root, font=('arial', 14), bd=4, textvariable=Booking)
Booking_Date_entry.place(x=260,y=380)

Packing_Date_entry=Entry(root, font=('arial', 14), bd=4, textvariable=Packing)
Packing_Date_entry.place(x=260,y=420)

Payment_entry_combobox=ttk.Combobox(root, font=('arial', 14, 'bold'), values=("Online", "Cash"), textvariable=Payment)
Payment_entry_combobox.place(x=260,y=460)

#Search----------------------------------------------------------------
SearchFrame=Frame(root, bg='silver', relief=GROOVE, borderwidth=4)
SearchFrame.place(x=560, y=60, height=45, width=650)

SearchLabel=Label(root, text="  Search", font=('candara', 14, 'bold'), bg='black', fg='white', relief=RIDGE, borderwidth=5, width=15, anchor='w')
SearchLabel.place(x=560, y=60, height=45, width=650)

Search_combobox=ttk.Combobox(root, font=('arial', 12, 'bold'), state="readonly", values=("Customer ID", "Customer Name","Room No", "Contact"))
Search_combobox.place(x=655, y=70)

SrchBtn=Button(root, text='Search', width=12, font=('arial', 9, 'bold'), bd=2, bg='#7cdc8c', fg='black', activebackground='red', command=search)
SrchBtn.place(x=875, y=69)

#An FRAME---------------------------------------------------------------
MainFrame=Frame(DataFrame, bg='black', relief=GROOVE, borderwidth=4)
MainFrame.place(x=7, y=55, height=508, width=643)

#Treeview---------------------------------------------------------------
YScroll=tk.Scrollbar(MainFrame, orient=tk.VERTICAL)
XScroll=tk.Scrollbar(MainFrame, orient=tk.HORIZONTAL)

customerTable=ttk.Treeview(MainFrame, columns=("Customer ID", "Customer Name", "Room No", "Gender", "Address", "Contact", "Booking Date", "Packing Date", "Payment"), yscrollcommand=YScroll.set, xscrollcommand=XScroll.set)

YScroll.pack(side=tk.RIGHT, fill=tk.Y)
XScroll.pack(side=tk.BOTTOM, fill=tk.X)

customerTable.heading("Customer ID", text="Customer ID")
customerTable.heading("Customer Name", text="Customer Name")
customerTable.heading("Room No", text="Room No.")
customerTable.heading("Gender", text="Gender")
customerTable.heading("Address", text="Address")
customerTable.heading("Contact", text="Contact")
customerTable.heading("Booking Date", text="Booking Date")
customerTable.heading("Packing Date", text="Packing Date")
customerTable.heading("Payment", text="Payment")

#Width:--
customerTable.column("Customer ID", width=100)
customerTable.column("Customer Name", width=100)
customerTable.column("Room No", width=100)
customerTable.column("Gender", width=100 )
customerTable.column("Address", width=100)
customerTable.column("Contact", width=100)
customerTable.column("Booking Date", width=100)
customerTable.column("Packing Date", width=100)
customerTable.column("Payment", width=100)

customerTable['show']='headings'

customerTable.pack(fill=tk.BOTH, expand=True)

YScroll.config(command=customerTable.yview)
XScroll.config(command=customerTable.xview)

#FETCH Data------------------------------------------------------------
def fetch_data():
    conn=None
    try:
        conn=mysql.connector.connect(
            host="localhost",    
            user="root",
            password="kartikey1",
            database="Hotel_Management"
        )
        curr=conn.cursor()
        
        query="SELECT * FROM Customer_details"
        curr.execute(query)
        
        rows=curr.fetchall()
        
        for item in customerTable.get_children():
            customerTable.delete(item)
        
        for row in rows:
            customerTable.insert('', tk.END, values=row)
        
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    
    finally:
         if conn and conn.is_connected():
            conn.close()
#FETCH in Rows---------------------------------------------------------
def get_values(event):
    cursor_row=customerTable.focus()
    content=customerTable.item(cursor_row)
    row=content['values']
    ID.set(row[0])
    Name.set(row[1])
    Room.set(row[2])
    Gender.set(row[3])
    Address.set(row[4])
    Contact.set(row[5])
    Booking.set(row[6])
    Packing.set(row[7])
    Payment.set(row[8])

#Buttons---------------------------------------------------------------
def insert():
        Customer_ID=Customer_ID_entry.get()
        Customer_Name=Customer_Name_entry.get()
        Room_No=Room_No_entry.get()
        Gender=Gender_entry_combobox.get()
        Address=Address_entry.get()
        Contact=Contact_entry.get()
        Booking_Date=Booking_Date_entry.get()
        Packing_Date=Packing_Date_entry.get()
        Payment=Payment_entry_combobox.get()
        
        try:
            conn=mysql.connector.connect(
                host="localhost",    
                user="root",
                password="kartikey1",
                database="Hotel_Management"
            )
            if conn.is_connected():
                cursor=conn.cursor()
                
                sql="Insert into Customer_details (Customer_ID, Customer_Name, Room_No, Gender, Address, Contact, Booking_Date, Packing_Date, Payment) values(%s, %s, %s, %s, %s, %s, %s, %s, %s)"
                val=(Customer_ID, Customer_Name, Room_No, Gender, Address, Contact, Booking_Date, Packing_Date, Payment)
                cursor.execute(sql, val)
                conn.commit()
                messagebox.showinfo("Insert", "Data inserted successfully..")
            else:
                messagebox.showerror("Error", "You can't insert this Data")
        except mysql.connector.Error as E:
            messagebox.showerror("Error", f"Error:{E}")
        finally:
            if conn.is_connected():
                cursor.close()
                conn.close()
                fetch_data()
                
BTN1=Button(DataLabelFrame, text='Add', width=10, font=('arial', 10, 'bold'), bd=2, bg='#7cdc8c', fg='black', command=insert, activebackground='crimson')
BTN1.place(x=10, y=20)
#-----------------------------------------------------------------------
def update():
    Customer_ID=Customer_ID_entry.get()
    Customer_Name=Customer_Name_entry.get()
    Room_No=Room_No_entry.get()
    Gender=Gender_entry_combobox.get()
    Address=Address_entry.get()
    Contact=Contact_entry.get()
    Booking_Date=Booking_Date_entry.get()
    Packing_Date=Packing_Date_entry.get()
    Payment=Payment_entry_combobox.get()

    try:
        conn=mysql.connector.connect(
            host="localhost",
            user="root",
            password="kartikey1",
            database="Hotel_Management"
        )
        if conn.is_connected():
            cursor=conn.cursor()

            sql="Update Customer_details set Customer_Name=%s, Room_No=%s, Gender=%s, Address=%s, Contact=%s, Booking_Date=%s, Packing_Date=%s, Payment=%s where Customer_ID=%s"
            val=(Customer_Name, Room_No, Gender, Address, Contact, Booking_Date, Packing_Date, Payment, Customer_ID)

            cursor.execute(sql, val)
            conn.commit()
            messagebox.showinfo("Updated", "Data updated successfully..")
        else:
            messagebox.showerror("Error", "You can't update this Data")
    except mysql.connector.Error as E:
        messagebox.showerror("Error", f"Error:{E}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            fetch_data()
BTN2=Button(DataLabelFrame, text='Update', width=10, font=('arial', 10, 'bold'), bd=2, bg='#7cdc8c', fg='black', activebackground='crimson', command=update)
BTN2.place(x=118, y=20)
#---------------------------------------------------------------------------
def delete():
        Customer_ID=Customer_ID_entry.get()

        try:
            conn=mysql.connector.connect(
                host="localhost",    
                user="root",
                password="kartikey1",
                database="Hotel_Management"
            )
            if conn.is_connected():
                cursor=conn.cursor()

                sql="DELETE FROM Customer_details WHERE Customer_ID=%s"
                val=(Customer_ID,)
                cursor.execute(sql, val)
                conn.commit()
                messagebox.showinfo("Delete", "Data deleted successfully..")
            else:
                messagebox.showerror("Error", "You can't delete this Data")
        except mysql.connector.Error as E:
            messagebox.showerror("Error", f"Error:{E}")
        finally:
            if conn.is_connected():
                cursor.close()
                conn.close()
                fetch_data()

BTN3=Button(DataLabelFrame, text='Delete', width=10, font=('arial', 10, 'bold'), bd=2, bg='#7cdc8c', fg='black', activebackground='crimson', command=delete)
BTN3.place(x=226, y=20)
#-------------------------------------------------------------------------------
search_results=[]
def search():
    Customer_ID=Customer_ID_entry.get()
    Customer_Name=Customer_Name_entry.get()
    Room_No=Room_No_entry.get()
    Contact=Contact_entry.get()

    if not Customer_ID and not Customer_Name and not Room_No and not Contact:
        messagebox.showerror("Error", "Please enter search details")
        return

    try:
        conn=mysql.connector.connect(
            host="localhost",
            user="root",
            password="kartikey1",
            database="Hotel_Management"
        )
        if conn.is_connected():
            cursor=conn.cursor()

            sql="select * from Customer_details where Customer_ID=%s or Customer_Name=%s or Room_No=%s or Contact=%s"
            val=(Customer_ID, Customer_Name, Room_No, Contact)

            cursor.execute(sql, val)
            fetched_data=cursor.fetchall()
            if fetched_data:
                search_results.clear()
                for data in fetched_data:
                    search_results.append(data)
            for row in customerTable.get_children():
                customerTable.delete(row)
            for data in search_results:
                customerTable.insert('', END, values=data)
            conn.commit()
        else:
            messagebox.showerror("Error", "You can't search this Data")
    except mysql.connector.Error as E:
        messagebox.showerror("Error", f"Error:{E}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            fetch_data()  
def update_table():
    if search_results:
        for row in customerTable.get_children():
            customerTable.delete(row)
        for data in search_results:
            customerTable.insert('', END, values=data)            
            
BTN4=Button(DataLabelFrame, text='Search', width=12, font=('arial', 12, 'bold'), bd=2, bg='royal blue', fg='white', activebackground='crimson', relief=RIDGE)
BTN4.place(x=230, y=118)

#Show All Records-----------------------------------------------------------
display_text=Text(SearchLabel, width=40, height=10)
display_text.place(x=10, y=50)

def showall(display_text):
    try:
        conn=mysql.connector.connect(
            host="localhost",
            user="root",
            password="kartikey1",
            database="Hotel_Management"
        )
        if conn.is_connected():
            cursor=conn.cursor()

            sql="SELECT * FROM Customer_details"
            cursor.execute(sql)
            result=cursor.fetchall()
            display_text.delete('1.0', 'end')

            for row in result:
                display_text.insert('end', str(row) + '\n')

            messagebox.showinfo("Records", "All records displayed successfully.")
        else:
            messagebox.showerror("Error", "Can't connect to the database.")
    except mysql.connector.Error as E:
        messagebox.showerror("Error", f"Error: {E}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            fetch_data()

ShowBtn=Button(root, text='Show all', width=12, font=('arial', 9, 'bold'), bd=2, bg='#7cdc8c', fg='black', activebackground='crimson', command=lambda:showall(display_text))
ShowBtn.place(x=988, y=69)
#---------------------------------------------------------------------------
def btnClear():
    global val
    val=""
    data.set("")
    Customer_ID_entry.delete(0,END)
    Customer_Name_entry.delete(0,END)
    Room_No_entry.delete(0,END)
    Gender_entry_combobox.delete(0,END)
    Address_entry.delete(0,END)
    Contact_entry.delete(0,END)
    Booking_Date_entry.delete(0,END)
    Packing_Date_entry.delete(0,END)
    Payment_entry_combobox.delete(0,END)

BTN5=Button(DataLabelFrame, text='Clear', width=10, font=('arial', 10, 'bold'), bd=2, bg='#7cdc8c', fg='black', activebackground='crimson', command=btnClear)
BTN5.place(x=335, y=20) 
#----------------------------------------------------------------------------
def close():
    root.destroy()

button=tk.Button(root, text="E X I T", font=('tahoma', 10, 'bold'), command=close, width=6, bd=2, fg='red', activebackground='crimson')
button.place(x=1135,y=68)  

fetch_data()

customerTable.bind("<ButtonRelease-1>",get_values)


root.mainloop()
